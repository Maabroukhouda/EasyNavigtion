<!DOCTYPE html>
<html>
<head>
	{% block head %}
		<meta charset="UTF-8">
		<title>
			{% block title %}EasyNavigation
			{% endblock %}</title>
	{% block stylesheets %}
	<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
	<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.css' rel='stylesheet' />
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
		<style>
			#refreshButton {
				position: absolute;
				bottom : 30px;
				right: 50px;
				padding: 10px;
				z-index: 400;
			}
			#EnregistrerButton {
				 position: absolute;
				 bottom : 90px;
				 right: 50px;
				 padding: 10px;
				 z-index: 400;
			 }
			.map-overlay {
				font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
				position: absolute;
				width: 230px;
				top: 70px;
				left: 20px;
				padding: 10px;
			}
			.map-overlay .map-overlay-inner {
				background-color: #fff;
				box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
				border-radius: 3px;
				padding: 10px;
				margin-bottom: 10px;
			}
			.map-overlay-inner fieldset {
				border: none;
				padding: 0;
				margin: 0 0 10px;
			}
			.map-overlay-inner fieldset:last-child {
				margin: 0;
			}
			.map-overlay-inner select {
				width: 100%;
			}
			.map-overlay-inner p {
				margin: 0;
			}
			.map-overlay-inner label {
				display: block;
				font-weight: bold;
			}
			.map-overlay-inner button {
				background-color: cornflowerblue;
				color: white;
				border-radius: 5px;
				display: inline-block;
				height: 20px;
				border: none;
				cursor: pointer;
			}
			.map-overlay-inner button:focus {
				outline: none;
			}
			.map-overlay-inner button:hover {
				background-color: blue;
				box-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);
				-webkit-transition: background-color 500ms linear;
				-ms-transition: background-color 500ms linear;
				transition: background-color 500ms linear;
			}
			.offset > label,
			.offset > input {
				display: inline;
			}
			#animateLabel {
				display: inline-block;
				min-width: 20px;
			}
		</style>
	{% endblock %}

	{% block javascripts %}
		<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js" integrity="sha384-SR1sx49pcuLnqZUnnPwx6FCym0wLsk5JZuNx2bPPENzswTNFaQU1RDvt3wT4gWFG" crossorigin="anonymous"></script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.min.js" integrity="sha384-j0CNLUeiqtyaRmlzUHCPZ+Gy5fQu0dQ6eZ/xAww941Ai1SxSY+0EQqNXNE6DZiVc" crossorigin="anonymous"></script>
	{% endblock %}
	{% endblock %}
</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
	<div class="container-fluid">
		<a class="fw-bold navbar-brand text-warning" href="{{path('offre' )}}">EasyNavigation</a>

		<div class="collapse navbar-collapse" id="navbarNavAltMarkup">
			<div class="navbar-nav">
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle" href="{{path('offre' )}}" id="navbarScrollingDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						Mes Offres
					</a>
					<ul class="dropdown-menu bg-dark" aria-labelledby="navbarScrollingDropdown">
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre' )}}">Tous Les Offres</a>
						</li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre', {'offre' :'voyage_regulier'} ) }}">Offre Voyage Regulier</a>
						</li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre', {'offre' :'voyage_organiser'} ) }}">Offre Voyage Organisé</a>
						</li>
						<li><hr class="dropdown-divider"></li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre', { 'offre' :'location'} ) }}">Offre Location Moyen Transport</a>
						</li>
					</ul>
				</li>
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle" href="#" id="navbarScrollingDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						Crée un Offre
					</a>
					<ul class="dropdown-menu bg-dark" aria-labelledby="navbarScrollingDropdown">
						<li>
							<a class="dropdown-item text-warning" href="{{path('newVoyageRegulier')}}">Voyage Regulier</a>
						</li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('newVoyageOrganiser')}}">Voyage Organisé</a>
						</li>
						<li><hr class="dropdown-divider"></li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('newLocation')}}">Location Moyen Transport</a>
						</li>
					</ul>
				</li>
				<a class="nav-link" href="{{path('parc' )}}">Mes Parcs</a>
				<a class="nav-link" href="{{path('parametre')}}">Paramétre</a>


				<a class="nav-link" href="{{path('security_logout')}}">déconnexion</a>


			</div>
		</div>
	</div>
</nav>

{{ form_start(form) }}
<div id="map" style="height: 600px; width:1360px" >
	<button class="btn btn-warning btn-sm" id="EnregistrerButton" onclick="myEnregister()">Enregistrer</button>
</div>
<div class="map-overlay top">
	<div class="map-overlay-inner">
		<div class="row" style="width: 15rem;">
			{% if userparc %}
			{% for parc in userparc %}
				<h5 class="col-6">Parc  {{ loop.index }}</h5>
				<a class="col-2 btn btn-warning btn-close "  aria-label="Close" href="{{path('delete_parc', {'id' :parc.id } ) }}" role="button"></a>
				<p></p>
			{% endfor %}
			{% else %}
				<h5 class="col-6">Aucun parc</h5>

			{% endif %}

			<input type="hidden" value="{{all_parc}}" id="all" >
		</div>
	</div>
</div>
{{ form_end(form) }}
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.js'></script>
<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoiaG91ZGFtYWJyb3VrIiwiYSI6ImNrcDMwYnZ1YTE5OHAycGxnejJ4aHgwYTMifQ.A9Sdf5GSoNH8zM-LD1bTbA';
	var map = new mapboxgl.Map({
		container: 'map',
		style: 'mapbox://styles/mapbox/dark-v10',
		center: [9.561555499999997,33.892166 ],
		zoom: 7
	});

	var canvas = map.getCanvasContainer();

	map.addControl(
			new MapboxGeocoder({
				accessToken: mapboxgl.accessToken,
				//mapboxgl: mapboxgl
			})
	);

	var all_p = document.querySelector('#all').value;
	points = all_p.split(',');
	console.log(points);
	var old_points =[];
	var add_points =[];
	console.log(points.length)
	map.on('load', function () {
		for ( i in points){
			point= points[i].split(' ');
			n=parseInt(i)+1;
			p= {
				'type': 'Feature',
				'geometry': {
					'type': 'Point',
					'coordinates':  [
						point[0],point[1]
					],
				},

				'type': 'Feature',
				'properties': {
					'description':
							'Point'+n,
				},
				};
			old_points.push(p);
		}

		map.addSource('point', {
			'type': 'geojson',
			'data': {
				'type': 'FeatureCollection',
				'features':  old_points,
			}
		})

		map.addLayer({
			'id': 'park-volcanoes',
			'type': 'circle',
			'source': 'point',
			'paint': {
				'circle-radius': 6,
				'circle-color': '#ffc700'
			},
			'filter': ['==', '$type', 'Point']
		});
	});


	var popup = new mapboxgl.Popup({
		closeButton: false,
		closeOnClick: false
	});
	map.on('mouseenter', 'park-volcanoes', function (e) {
// Change the cursor style as a UI indicator.
		map.getCanvas().style.cursor = 'pointer';

		var coordinates = e.features[0].geometry.coordinates.slice();
		console.log(coordinates);
		var description = e.features[0].properties.description;

// Ensure that if the map is zoomed out such that multiple
// copies of the feature are visible, the popup appears
// over the copy being pointed to.
		while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
			coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
		}

// Populate the popup and set its coordinates
// based on the feature found.
		popup.setLngLat(coordinates).setHTML(description).addTo(map);
	});

	map.on('mouseleave', 'park-volcanoes', function () {
		map.getCanvas().style.cursor = '';
		popup.remove();
	});

	map.on('click', function (e){
		var coordsObj = e.lngLat;
		canvas.style.cursor = '';
		var coords = Object.keys(coordsObj).map(function (key) {
			return coordsObj[key];
		});

		var point ={
			'type': 'Feature',
			'geometry': {
				'type': 'Point',
				'coordinates': coords ,
			}};

		add_points.push(point);


		if(map.getSource('national-park')){
			map.getSource('national-park').setData({
				'type': 'FeatureCollection',
						'features':  add_points,
			});
		}
		else{
			map.addSource('national-park', {
				'type': 'geojson',
				'data': {
					'type': 'FeatureCollection',
					'features':  add_points,
				}
			})

			map.addLayer({
				'id': 'park',
				'type': 'circle',
				'source': 'national-park',
				'paint': {
					'circle-radius': 6,
					'circle-color': '#ffc700'
				},
				'filter': ['==', '$type', 'Point']
			});
		}
	});





	var refresh = document.getElementById("EnregistrerButton").onclick = function() {myEnregister()};
	function  myEnregister(){
		x=add_points[0].geometry.coordinates[0]+','+add_points[0].geometry.coordinates[1];
		console.log(typeof(x));
		for (let i =1; i< add_points.length ; i++ ) {
			console.log(add_points[i].geometry.coordinates[0]);
			x=x+" "+add_points[i].geometry.coordinates[0]+','+add_points[i].geometry.coordinates[1];
			console.log(typeof(x));
		}
		document.querySelector('#parcs_location').value = x;

	}


</script>

</body></html>