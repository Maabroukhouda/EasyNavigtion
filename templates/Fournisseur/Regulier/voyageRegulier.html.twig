<!DOCTYPE html>
<html>
<head>
	{% block head %}
		<meta charset="UTF-8">
		<title>
			{% block title %}EasyNavigation
			{% endblock %}</title>
	{% block stylesheets %}
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.7.2/main.min.css" integrity="sha256-u40zn9KeZYpMjgYaxWJccb4HnP0i8XI17xkXrEklevE=" crossorigin="anonymous">
	<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
	<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.css' rel='stylesheet' />
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
		<style>
			#refreshButton {
				position: absolute;
				bottom : 50px;
				right: 20px;
				padding: 10px;
				z-index: 400;
			}
			#calendrier{
				width: 70%;
				margin: auto;
			}
		</style>
	{% endblock %}

	{% block javascripts %}
		<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.7.2/main.min.js" integrity="sha256-yirUYbNvdsLHfZcQDyDMB51pfQ0Mn8siGDZOvtBgCFw=" crossorigin="anonymous"></script>
		<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js" integrity="sha384-SR1sx49pcuLnqZUnnPwx6FCym0wLsk5JZuNx2bPPENzswTNFaQU1RDvt3wT4gWFG" crossorigin="anonymous"></script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.min.js" integrity="sha384-j0CNLUeiqtyaRmlzUHCPZ+Gy5fQu0dQ6eZ/xAww941Ai1SxSY+0EQqNXNE6DZiVc" crossorigin="anonymous"></script>
	{% endblock %}
	{% endblock %}
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
	<div class="container-fluid">
		<a class="fw-bold navbar-brand text-warning" href="{{path('offre' )}}">EasyNavigation</a>

		<div class="collapse navbar-collapse" id="navbarNavAltMarkup">
			<div class="navbar-nav">
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle" href="{{path('offre' )}}" id="navbarScrollingDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						Mes Offres
					</a>
					<ul class="dropdown-menu bg-dark" aria-labelledby="navbarScrollingDropdown">
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre' )}}">Tous Les Offres</a>
						</li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre', {'offre' :'voyage_regulier'} ) }}">Offre Voyage Regulier</a>
						</li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre', {'offre' :'voyage_organiser'} ) }}">Offre Voyage Organiser</a>
						</li>
						<li><hr class="dropdown-divider"></li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('offre', { 'offre' :'location'} ) }}">Offre Location Moyenne Transport</a>
						</li>
					</ul>
				</li>
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle" href="#" id="navbarScrollingDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						Crée un Offre
					</a>
					<ul class="dropdown-menu bg-dark" aria-labelledby="navbarScrollingDropdown">
						<li>
							<a class="dropdown-item text-warning" href="{{path('newVoyageRegulier')}}">Voyage Regulier</a>
						</li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('newVoyageOrganiser')}}">Voyage Organiser</a>
						</li>
						<li><hr class="dropdown-divider"></li>
						<li>
							<a class="dropdown-item text-warning" href="{{path('newLocation')}}">Location Moyenne Transport</a>
						</li>
					</ul>
				</li>
				<a class="nav-link" href="{{path('parc' )}}">Mes Parcs</a>
				<a class="nav-link" href="{{path('parametre')}}">Paramétre</a>


				<a class="nav-link" href="{{path('security_logout')}}">déconnexion</a>


			</div>
		</div>
	</div>
</nav>

</br></br>
<h3 class="text-center link-Light fst-italic">
	Offre Voyage Regulier</h3>
{{ form_start(formVoyageR) }}

<div class="row">
	<div class="col">
		{{form_widget(formVoyageR.depart)}}
		<small class="text-danger">{{form_errors(formVoyageR.depart) }}</small>
	</div>
	<div class="col">
		<small class="text-danger">{{form_errors(formVoyageR.destination) }}</small>
		{{form_widget(formVoyageR.destination)}}	</div>
</div>
		<div class="row mt-2">
			<div class="col-lg-3" style="margin-left: 5%">

				</br>
				<div class="form-group">

					<div class="mb-3">
						</div>
					<div class="mb-3">
						<small class="text-danger">{{form_errors(formVoyageR.nbplace) }}</small>
						{{form_widget(formVoyageR.nbplace)}}</div>
					<div class="mb-3">
						<small class="text-danger">{{form_errors(formVoyageR.nom) }}</small>
						{{form_widget(formVoyageR.nom)}}</div>
					<div class="mb-3">
						<small class="text-danger">{{form_errors(formVoyageR.image) }}</small>

						{{form_widget(formVoyageR.image)}}</div>
					<div class="mb-3">
						<small class="text-danger">{{form_errors(formVoyageR.description) }}</small>
						{{form_widget(formVoyageR.description)}}</div>
					<div class="mb-3">
						<small class="text-danger">{{form_errors(formVoyageR.prix) }}</small>
						{{form_widget(formVoyageR.prix)}}</div>
					<div class="text-center">
						<button type="submit" class="btn btn-outline-dark">
							Ajouter
						</button>
					</div>
				</div>
					{{ form_end(formVoyageR) }}
			</div>
			<div class="col-lg-4" style="margin-top: 5%">
			<div id="calendrier"></div>
			</div>
			<div class="col-lg-4">
				<div id="map" style="height: 80% ; margin-right: 5% ; margin-top: 15%" >
					<button class="btn btn-warning btn-sm" id="refreshButton" onclick="myFunction()">Actualiser</button>
				</div>
			</div>
		</div>

<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.js'></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
<script>
	//calandrier
	window.onload = () => {
		let calendarElt = document.querySelector('#calendrier');
		let calendar = new FullCalendar.Calendar(calendarElt,{
			initialView: 'dayGridMonth',
			locale:'fr',
			timeZone:'Tunisia',
			headerToolbar :{
				start: 'prev,next',
				end : 'dayGridMonth,dayGridWeek'
			}
		});
		calendar.render();
	}

	//map
	mapboxgl.accessToken = 'pk.eyJ1IjoiaG91ZGFtYWJyb3VrIiwiYSI6ImNrcDMwYnZ1YTE5OHAycGxnejJ4aHgwYTMifQ.A9Sdf5GSoNH8zM-LD1bTbA';
	var map = new mapboxgl.Map({
		container: 'map',
		style: 'mapbox://styles/mapbox/dark-v10',
		center: [9.400138, 33.8439408], // starting position
		zoom: 6
	});
	// initialize the map canvas to interact with later
	var canvas = map.getCanvasContainer();

	// an arbitrary start will always be the same
	// only the end or destination will change
	var start = [9.400138, 33.8439408];

	map.addControl(
			new MapboxGeocoder({
				accessToken: mapboxgl.accessToken,
				//mapboxgl: mapboxgl
			})
	);
	// this is where the code for the next step will go
	// create a function to make a directions request
	function getRoute(end) {
		// make a directions request using cycling profile
		// an arbitrary start will always be the same
		// only the end or destination will change
		// var start = [9.400138, 33.8439408];

		var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;

		// make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
		var req = new XMLHttpRequest();
		req.open('GET', url, true);
		req.onload = function () {
			var json = JSON.parse(req.response);
			var data = json.routes[0];
			var route = data.geometry.coordinates;
			var geojson = {
				type: 'Feature',
				properties: {},
				geometry: {
					type: 'LineString',
					coordinates: route
				}
			};
			// if the route already exists on the map, reset it using setData
			if (map.getSource('route')) {
				map.getSource('route').setData(geojson);
			} else { // otherwise, make a new request
				map.addLayer({
					id: 'route',
					type: 'line',
					source: {
						type: 'geojson',
						data: {
							type: 'Feature',
							properties: {},
							geometry: {
								type: 'LineString',
								coordinates: geojson
							}
						}
					},
					layout: {
						'line-join': 'round',
						'line-cap': 'round'
					},
					paint: {
						'line-color': '#ffffff',
						'line-width': 5,
						'line-opacity': 0.75
					}
				});
			}
			// add turn instructions here at the end
		};
		req.send();
	}




	// Add the geocoder to the
	map.on('load', function () {

		// make an initial directions request that
		// starts and ends at the same location
		getRoute(start);

		map.on('click', function (e) {
			var coordsObj = e.lngLat;
			canvas.style.cursor = '';
			var coords = Object.keys(coordsObj).map(function (key) {
				return coordsObj[key];
			});
			var end = {
				type: 'FeatureCollection',
				features: [{
					type: 'Feature',
					properties: {},
					geometry: {
						type: 'Point',
						coordinates: coords
					}
				}
				]
			};
			if (map.getLayer('point')) {
				if (map.getLayer('end')) {
					map.getSource('end').setData(end);
				} else {
					map.addLayer({
						id: 'end',
						type: 'circle',
						source: {
							type: 'geojson',
							data: {
								type: 'FeatureCollection',
								features: [{
									type: 'Feature',
									properties: {},
									geometry: {
										type: 'Point',
										coordinates: coords
									}
								}]
							}
						},
						paint: {
							'circle-radius': 10,
							'circle-color':  'rgba(238,191,21,0.96)'
						}
					});
					document.querySelector('#destination').value = coords
				}
				getRoute(coords);
			}
			else {
				start = coords;
				map.addLayer({
					id: 'point',
					type: 'circle',
					source: {
						type: 'geojson',
						data: {
							type: 'FeatureCollection',
							features: [{
								type: 'Feature',
								properties: {},
								geometry: {
									type: 'Point',
									coordinates: coords
								}
							}
							]
						}
					},
					paint: {
						'circle-radius': 10,
						'circle-color':  'rgba(238,191,21,0.96)'
					}
				});

				document.querySelector('#depart').value = coords

			}
		});
	});
	//refresh button
	var refresh = document.getElementById("refreshButton").onclick = function() {myFunction()};
	function myFunction() {
		if (map.getLayer('end')){
			map.removeLayer('end');
			map.removeSource('end');
			document.getElementById("destination").value = null;

		}
		if (map.getLayer('point')){
			map.removeLayer('point');
			map.removeSource('point');
			document.getElementById("depart").value =null;
		}
		if (map.getLayer('route')){
			map.removeLayer('route');
			map.removeSource('route');
		}
	}

</script>
</body>
</html>
